// Generated by CoffeeScript 1.3.3
var fs, utils;

fs = require('fs');

utils = require('./utils');

/*

Writing data to a source
--------------------------

The `csv().to` property provide convenient functions to write 
to a csv output like a stream or a file.
*/


module.exports = function(csv) {
  return {
    /*
    
      `to.options([options])`: Set or get options
      -------------------------------------------
    
      Update and retrieve options relative to the writable stream. 
      Return the options as an object if no argument is provided.
    */

    options: function(options) {
      if (options != null) {
        utils.merge(csv.options.to, options);
        return csv;
      } else {
        return csv.options.to;
      }
    },
    /*
    
      `to.stream(stream, [options])`: Write to a stream
      ---------------------------------------------------
    
      Take a writable stream as first argument and optionally 
      an object of options as a second argument.
    */

    stream: function(stream, options) {
      this.options(options);
      switch (csv.options.to.lineBreaks) {
        case 'auto':
          csv.options.to.lineBreaks = null;
          break;
        case 'unix':
          csv.options.to.lineBreaks = "\n";
          break;
        case 'mac':
          csv.options.to.lineBreaks = "\r";
          break;
        case 'windows':
          csv.options.to.lineBreaks = "\r\n";
          break;
        case 'unicode':
          csv.options.to.lineBreaks = "\u2028";
      }
      csv.pipe(stream);
      stream.on('error', function(e) {
        return csv.error(e);
      });
      stream.on('close', function() {
        return csv.emit('close', csv.state.count);
      });
      return csv;
    },
    /*
    
      `to.path(path, [options])`: Write to a path
      -------------------------------------------
    
      Take a file path as first argument and optionally an object of options as a second 
      argument. The `close` event is sent after the file is written. Relying on the `end` event is 
      incorrect because it is sent when parsing is done but before the file is written.
    */

    path: function(path, options) {
      var stream;
      this.options(options);
      options = utils.merge({}, csv.options.to);
      delete options.end;
      stream = fs.createWriteStream(path, options);
      csv.to.stream(stream, null);
      return csv;
    }
  };
};
