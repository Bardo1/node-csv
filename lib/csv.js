// Generated by CoffeeScript 1.3.3
/*
Module CSV - Copyright David Worms <open@adaltas.com> (BSD Licensed)

|-----------|      |---------|---------|       |---------|
|           |      |         |         |       |         |
|           |      |        CSV        |       |         |
|           |      |         |         |       |         |
|  Stream   |      |  Writer |  Reader |       |  Stream |
|  Reader   |.pipe(|   API   |   API   |).pipe(|  Writer |)
|           |      |         |         |       |         |
|           |      |         |         |       |         |
|-----------|      |---------|---------|       |---------|

fs.createReadStream('./in'.pipe(csv()).pipe( fs.createWriteStream('./out'))
*/

var CSV, Parser, Stringifier, Transformer, from, options, state, stream, to;

stream = require('stream');

state = require('./state');

options = require('./options');

from = require('./from');

to = require('./to');

Stringifier = require('./Stringifier');

Parser = require('./Parser');

Transformer = require('./Transformer');

CSV = function() {
  this.readable = true;
  this.writable = true;
  this.state = state();
  this.options = options();
  this.from = from(this);
  this.to = to(this);
  this.parser = Parser(this);
  this.parser.on('row', (function(row) {
    return this.transformer.transform(row);
  }).bind(this));
  this.parser.on('end', (function() {
    this.emit('end', this.state.count);
    return this.readable = false;
  }).bind(this));
  this.parser.on('error', (function(e) {
    return this.error(e);
  }).bind(this));
  this.stringifier = new Stringifier(this);
  this.transformer = new Transformer(this);
  return this;
};

CSV.prototype.__proto__ = stream.prototype;

CSV.prototype.pause = function() {
  return this.paused = true;
};

CSV.prototype.resume = function() {
  this.paused = false;
  return this.emit('drain');
};

/*

`write(data, [preserve])`: Write data
-------------------------------------

Implementation of the StreamWriter API with a larger signature. Data
may be a string, a buffer, an array or an object.

If data is a string or a buffer, it could span multiple lines. If data 
is an object or an array, it must represent a single line.
Preserve is for line which are not considered as CSV data.
*/


CSV.prototype.write = function(data, preserve) {
  if (!this.writable) {
    return false;
  }
  if (typeof data === 'string' && !preserve) {
    this.parser.parse(data);
  } else if (Array.isArray(data) && !this.state.transforming) {
    this.transformer.transform(data);
  } else {
    if (this.state.count === 0 && this.options.to.header === true) {
      this.stringifier.write(this.options.to.columns || this.options.from.columns);
    }
    this.stringifier.write(data, preserve);
    if (!this.state.transforming && !preserve) {
      this.state.count++;
    }
  }
  return !this.paused;
};

/*

`end()`: Terminate the parsing
-------------------------------

Call this method when no more csv data is to be parsed. It 
implement the StreamWriter API by setting the `writable` 
property to "false" and emitting the `end` event.
*/


CSV.prototype.end = function() {
  if (!this.writable) {
    return;
  }
  return this.parser.end();
};

/*

`transform(callback)`: Register the transformer callback
--------------------------------------------------------

User provided function call on each line to filter, enrich or modify 
the dataset. The callback is called asynchronously.
*/


CSV.prototype.transform = function(callback) {
  this.transformer.callback = callback;
  return this;
};

/*

`error(error)`: Handle error
----------------------------

Unified mechanism to handle error, will emit the error and mark the 
stream as non readable and non writable.
*/


CSV.prototype.error = function(e) {
  this.readable = false;
  this.writable = false;
  this.emit('error', e);
  if (this.readStream) {
    this.readStream.destroy();
  }
  return this;
};

module.exports = function() {
  return new CSV;
};
